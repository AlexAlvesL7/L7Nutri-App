#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
SISTEMA DE VERIFICA√á√ÉO DE EMAIL E ONBOARDING
Implementa verifica√ß√£o de email obrigat√≥ria e question√°rio inicial
"""

from flask import Flask, request, jsonify, render_template, redirect, url_for, session
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import secrets
import re
from datetime import datetime, timedelta
import requests
import os

# Configura√ß√µes de Email
EMAIL_CONFIG = {
    'SMTP_SERVER': 'smtp.gmail.com',
    'SMTP_PORT': 587,
    'EMAIL_USER': os.getenv('EMAIL_USER', 'seu_email@gmail.com'),
    'EMAIL_PASSWORD': os.getenv('EMAIL_PASSWORD', 'sua_senha_app'),
    'FROM_EMAIL': 'noreply@l7nutri.com',
    'FROM_NAME': 'L7Nutri - Nutri√ß√£o Inteligente'
}

def validar_email_real(email):
    """Valida se o email √© v√°lido e se o dom√≠nio existe"""
    
    # Valida√ß√£o b√°sica de formato
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(pattern, email):
        return False, "Formato de email inv√°lido"
    
    # Lista de dom√≠nios tempor√°rios/descart√°veis para bloquear
    dominios_bloqueados = [
        '10minutemail.com', 'tempmail.org', 'guerrillamail.com',
        'mailinator.com', 'yopmail.com', 'temp-mail.org'
    ]
    
    dominio = email.split('@')[1].lower()
    if dominio in dominios_bloqueados:
        return False, "Emails tempor√°rios n√£o s√£o permitidos"
    
    # Verificar se √© um dom√≠nio comum v√°lido
    dominios_validos = [
        'gmail.com', 'hotmail.com', 'outlook.com', 'yahoo.com',
        'bol.com.br', 'uol.com.br', 'ig.com.br', 'terra.com.br'
    ]
    
    if dominio not in dominios_validos:
        # Para dom√≠nios n√£o conhecidos, fazer verifica√ß√£o b√°sica
        try:
            import socket
            socket.gethostbyname(dominio)
        except:
            return False, "Dom√≠nio de email n√£o encontrado"
    
    return True, "Email v√°lido"

def gerar_token_verificacao():
    """Gera token √∫nico para verifica√ß√£o de email"""
    return secrets.token_urlsafe(32)

def enviar_email_verificacao(email, nome, token):
    """Envia email de verifica√ß√£o de conta"""
    
    try:
        # URL de verifica√ß√£o
        url_verificacao = f"https://l7nutri-app.onrender.com/verificar-email?token={token}"
        
        # HTML do email
        html_email = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Confirme sua conta L7Nutri</title>
        </head>
        <body style="font-family: Arial, sans-serif; background: #f5f5f5; margin: 0; padding: 20px;">
            <div style="max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                
                <!-- Header -->
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center;">
                    <h1 style="margin: 0; font-size: 28px;">ü•ó L7Nutri</h1>
                    <p style="margin: 10px 0 0 0; font-size: 16px;">Nutri√ß√£o Inteligente com IA</p>
                </div>
                
                <!-- Conte√∫do -->
                <div style="padding: 30px;">
                    <h2 style="color: #333; margin-bottom: 20px;">Ol√°, {nome}! üëã</h2>
                    
                    <p style="color: #666; line-height: 1.6; margin-bottom: 20px;">
                        Bem-vindo(a) √† <strong>L7Nutri</strong>! Estamos muito felizes em t√™-lo(a) conosco.
                    </p>
                    
                    <p style="color: #666; line-height: 1.6; margin-bottom: 25px;">
                        Para garantir a seguran√ßa da sua conta e ativar todos os recursos, 
                        clique no bot√£o abaixo para confirmar seu email:
                    </p>
                    
                    <!-- Bot√£o de Verifica√ß√£o -->
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="{url_verificacao}" 
                           style="background: linear-gradient(135deg, #28a745, #20c997); 
                                  color: white; 
                                  padding: 15px 30px; 
                                  text-decoration: none; 
                                  border-radius: 25px; 
                                  font-weight: bold; 
                                  font-size: 16px;
                                  display: inline-block;
                                  box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);">
                            ‚úÖ Confirmar Minha Conta
                        </a>
                    </div>
                    
                    <!-- Informa√ß√µes Importantes -->
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745; margin: 25px 0;">
                        <h3 style="color: #28a745; margin: 0 0 10px 0; font-size: 16px;">üéØ Pr√≥ximos Passos:</h3>
                        <ul style="color: #666; margin: 0; padding-left: 20px;">
                            <li>Confirme seu email clicando no bot√£o acima</li>
                            <li>Complete o question√°rio de sa√∫de da L7Chef</li>
                            <li>Receba seu plano nutricional personalizado</li>
                            <li>Comece sua jornada de transforma√ß√£o!</li>
                        </ul>
                    </div>
                    
                    <!-- Link alternativo -->
                    <p style="color: #999; font-size: 14px; line-height: 1.5; margin-top: 25px;">
                        <strong>N√£o consegue clicar no bot√£o?</strong><br>
                        Copie e cole este link no seu navegador:<br>
                        <span style="color: #667eea; word-break: break-all;">{url_verificacao}</span>
                    </p>
                    
                    <!-- Aviso de Seguran√ßa -->
                    <div style="background: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107; margin: 25px 0;">
                        <p style="color: #856404; margin: 0; font-size: 14px;">
                            üîí <strong>Seguran√ßa:</strong> Este link expira em 24 horas. 
                            Se voc√™ n√£o criou esta conta, ignore este email.
                        </p>
                    </div>
                </div>
                
                <!-- Footer -->
                <div style="background: #f8f9fa; padding: 20px; text-align: center; border-top: 1px solid #dee2e6;">
                    <p style="color: #999; margin: 0; font-size: 14px;">
                        ¬© 2025 L7Nutri - Transforme sua rela√ß√£o com a alimenta√ß√£o
                    </p>
                    <p style="color: #999; margin: 5px 0 0 0; font-size: 12px;">
                        Este √© um email autom√°tico, n√£o responda.
                    </p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Configurar email
        msg = MIMEMultipart('alternative')
        msg['Subject'] = "ü•ó Confirme sua conta L7Nutri - Bem-vindo!"
        msg['From'] = f"{EMAIL_CONFIG['FROM_NAME']} <{EMAIL_CONFIG['FROM_EMAIL']}>"
        msg['To'] = email
        
        # Anexar HTML
        html_part = MIMEText(html_email, 'html', 'utf-8')
        msg.attach(html_part)
        
        # Enviar email
        with smtplib.SMTP(EMAIL_CONFIG['SMTP_SERVER'], EMAIL_CONFIG['SMTP_PORT']) as server:
            server.starttls()
            server.login(EMAIL_CONFIG['EMAIL_USER'], EMAIL_CONFIG['EMAIL_PASSWORD'])
            server.send_message(msg)
        
        print(f"‚úÖ Email de verifica√ß√£o enviado para: {email}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao enviar email: {e}")
        return False

def criar_usuario_com_verificacao(dados_usuario):
    """Cria usu√°rio com status 'pendente' aguardando verifica√ß√£o"""
    
    # Validar email
    email_valido, mensagem = validar_email_real(dados_usuario['email'])
    if not email_valido:
        return False, mensagem
    
    # Gerar token de verifica√ß√£o
    token = gerar_token_verificacao()
    
    # Dados do usu√°rio com status pendente
    usuario_pendente = {
        **dados_usuario,
        'status': 'pendente_verificacao',
        'token_verificacao': token,
        'data_criacao': datetime.now(),
        'token_expira': datetime.now() + timedelta(hours=24),
        'onboarding_completo': False
    }
    
    # Salvar no banco (status pendente)
    # TODO: Implementar salvamento no banco
    
    # Enviar email de verifica√ß√£o
    sucesso_email = enviar_email_verificacao(
        dados_usuario['email'], 
        dados_usuario['nome'], 
        token
    )
    
    if sucesso_email:
        return True, "Conta criada! Verifique seu email para ativar."
    else:
        return False, "Erro ao enviar email de verifica√ß√£o"

# Question√°rio L7Chef para onboarding obrigat√≥rio
QUESTIONARIO_L7CHEF = {
    "etapa_1_dados_pessoais": {
        "titulo": "üìä Dados Pessoais",
        "campos": [
            {"nome": "idade", "tipo": "number", "label": "Idade", "obrigatorio": True},
            {"nome": "sexo", "tipo": "select", "label": "Sexo", "opcoes": ["Masculino", "Feminino"], "obrigatorio": True},
            {"nome": "peso_atual", "tipo": "number", "label": "Peso Atual (kg)", "obrigatorio": True},
            {"nome": "altura", "tipo": "number", "label": "Altura (cm)", "obrigatorio": True},
            {"nome": "peso_meta", "tipo": "number", "label": "Peso Desejado (kg)", "obrigatorio": True}
        ]
    },
    
    "etapa_2_estilo_vida": {
        "titulo": "üèÉ‚Äç‚ôÄÔ∏è Estilo de Vida",
        "campos": [
            {
                "nome": "nivel_atividade", 
                "tipo": "select", 
                "label": "N√≠vel de Atividade F√≠sica",
                "opcoes": [
                    "Sedent√°rio (pouco ou nenhum exerc√≠cio)",
                    "Levemente ativo (exerc√≠cio leve 1-3 dias/semana)",
                    "Moderadamente ativo (exerc√≠cio moderado 3-5 dias/semana)",
                    "Muito ativo (exerc√≠cio intenso 6-7 dias/semana)",
                    "Extremamente ativo (exerc√≠cio muito intenso, trabalho f√≠sico)"
                ],
                "obrigatorio": True
            },
            {
                "nome": "objetivo_principal",
                "tipo": "select",
                "label": "Objetivo Principal",
                "opcoes": [
                    "Perder peso",
                    "Ganhar massa muscular",
                    "Manter peso atual",
                    "Melhorar sa√∫de geral",
                    "Aumentar energia",
                    "Melhorar performance esportiva"
                ],
                "obrigatorio": True
            },
            {"nome": "horas_sono", "tipo": "number", "label": "Horas de sono por noite", "obrigatorio": True},
            {"nome": "nivel_stress", "tipo": "select", "label": "N√≠vel de Stress", "opcoes": ["Baixo", "M√©dio", "Alto"], "obrigatorio": True}
        ]
    },
    
    "etapa_3_alimentacao": {
        "titulo": "üçΩÔ∏è H√°bitos Alimentares",
        "campos": [
            {"nome": "refeicoes_dia", "tipo": "number", "label": "Quantas refei√ß√µes faz por dia?", "obrigatorio": True},
            {"nome": "agua_diaria", "tipo": "number", "label": "Litros de √°gua por dia", "obrigatorio": True},
            {
                "nome": "restricoes_alimentares",
                "tipo": "checkbox",
                "label": "Restri√ß√µes Alimentares",
                "opcoes": [
                    "Vegetariano", "Vegano", "Intoler√¢ncia √† lactose", 
                    "Diab√©tico", "Hipertens√£o", "Colesterol alto",
                    "Alergia a gl√∫ten", "Nenhuma"
                ],
                "obrigatorio": False
            },
            {
                "nome": "alimentos_favoritos",
                "tipo": "checkbox",
                "label": "Alimentos Favoritos",
                "opcoes": [
                    "Frutas", "Verduras", "Carnes", "Peixes", "Ovos",
                    "Massas", "Arroz", "Feij√£o", "Nozes", "Iogurte"
                ],
                "obrigatorio": False
            }
        ]
    },
    
    "etapa_4_saude": {
        "titulo": "üè• Informa√ß√µes de Sa√∫de",
        "campos": [
            {"nome": "problemas_saude", "tipo": "textarea", "label": "Problemas de sa√∫de ou medicamentos", "obrigatorio": False},
            {"nome": "historico_dietas", "tipo": "textarea", "label": "J√° fez alguma dieta? Qual resultado?", "obrigatorio": False},
            {"nome": "frequencia_exercicio", "tipo": "select", "label": "Com que frequ√™ncia se exercita?", 
             "opcoes": ["Nunca", "1x/semana", "2-3x/semana", "4-5x/semana", "Todos os dias"], "obrigatorio": True},
            {"nome": "motivacao", "tipo": "textarea", "label": "O que mais te motiva a cuidar da alimenta√ß√£o?", "obrigatorio": True}
        ]
    }
}

def analisar_questionario_l7chef(respostas):
    """Analisa respostas do question√°rio e gera recomenda√ß√µes personalizadas"""
    
    # Calcular TMB (Taxa Metab√≥lica Basal)
    peso = float(respostas['peso_atual'])
    altura = float(respostas['altura'])
    idade = int(respostas['idade'])
    sexo = respostas['sexo']
    
    if sexo.lower() == 'masculino':
        tmb = (10 * peso) + (6.25 * altura) - (5 * idade) + 5
    else:
        tmb = (10 * peso) + (6.25 * altura) - (5 * idade) - 161
    
    # Fator de atividade
    fatores_atividade = {
        "Sedent√°rio (pouco ou nenhum exerc√≠cio)": 1.2,
        "Levemente ativo (exerc√≠cio leve 1-3 dias/semana)": 1.375,
        "Moderadamente ativo (exerc√≠cio moderado 3-5 dias/semana)": 1.55,
        "Muito ativo (exerc√≠cio intenso 6-7 dias/semana)": 1.725,
        "Extremamente ativo (exerc√≠cio muito intenso, trabalho f√≠sico)": 1.9
    }
    
    fator = fatores_atividade.get(respostas['nivel_atividade'], 1.55)
    calorias_manutencao = tmb * fator
    
    # Ajustar por objetivo
    objetivo = respostas['objetivo_principal']
    if 'Perder peso' in objetivo:
        calorias_meta = calorias_manutencao - 500
        proteina_pct = 30  # Maior prote√≠na para preservar massa
        carbo_pct = 40
        gordura_pct = 30
    elif 'Ganhar massa' in objetivo:
        calorias_meta = calorias_manutencao + 300
        proteina_pct = 25
        carbo_pct = 50  # Mais carboidratos para energia
        gordura_pct = 25
    else:  # Manter peso
        calorias_meta = calorias_manutencao
        proteina_pct = 25
        carbo_pct = 45
        gordura_pct = 30
    
    # Calcular macros
    proteina_g = (calorias_meta * proteina_pct / 100) / 4
    carbo_g = (calorias_meta * carbo_pct / 100) / 4
    gordura_g = (calorias_meta * gordura_pct / 100) / 9
    
    # Recomenda√ß√µes personalizadas
    recomendacoes = {
        "calorias_diarias": round(calorias_meta),
        "macronutrientes": {
            "proteina": round(proteina_g),
            "carboidrato": round(carbo_g),
            "gordura": round(gordura_g)
        },
        "agua_recomendada": max(2.5, peso * 0.035),  # 35ml por kg
        "refeicoes_sugeridas": 5 if objetivo == "Ganhar massa muscular" else 4,
        "dicas_personalizadas": gerar_dicas_personalizadas(respostas)
    }
    
    return recomendacoes

def gerar_dicas_personalizadas(respostas):
    """Gera dicas baseadas nas respostas do usu√°rio"""
    
    dicas = []
    
    # Dicas baseadas no objetivo
    if 'Perder peso' in respostas['objetivo_principal']:
        dicas.extend([
            "üî• Foque em alimentos com alta saciedade: prote√≠nas magras e fibras",
            "‚è∞ Fa√ßa 4-5 refei√ß√µes menores ao longo do dia",
            "üíß Beba √°gua antes das refei√ß√µes para aumentar a saciedade"
        ])
    
    # Dicas baseadas na atividade f√≠sica
    if 'Sedent√°rio' in respostas['nivel_atividade']:
        dicas.append("üö∂‚Äç‚ôÄÔ∏è Comece com caminhadas de 20 minutos di√°rios")
    
    # Dicas baseadas no sono
    if int(respostas['horas_sono']) < 7:
        dicas.append("üò¥ Durma pelo menos 7-8 horas para otimizar o metabolismo")
    
    # Dicas baseadas no stress
    if respostas['nivel_stress'] == 'Alto':
        dicas.append("üßò‚Äç‚ôÄÔ∏è Pratique t√©cnicas de relaxamento antes das refei√ß√µes")
    
    return dicas

if __name__ == "__main__":
    print("üîß Sistema de Verifica√ß√£o de Email e Onboarding configurado!")
    print("üìß Configura√ß√µes de email prontas")
    print("üìã Question√°rio L7Chef implementado")
    print("üéØ Sistema de recomenda√ß√µes personalizado")
