"""Adiciona nome e email ao usuario

Revision ID: 7e96ed3de706
Revises: e8676e89fb6c
Create Date: 2025-07-15 11:14:22.326848

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7e96ed3de706'
down_revision = 'e8676e89fb6c'
branch_labels = None
depends_on = None


def upgrade():
    # Etapa 1: Adiciona as colunas como anuláveis
    with op.batch_alter_table('usuario', schema=None) as batch_op:
        batch_op.add_column(sa.Column('nome', sa.String(length=150), nullable=True))
        batch_op.add_column(sa.Column('email', sa.String(length=150), nullable=True))

    # Etapa 2: Preenche os dados existentes
    op.execute("UPDATE usuario SET nome = 'Usuário Padrão', email = 'usuario' || id || '@example.com' WHERE nome IS NULL OR email IS NULL")

    # Etapa 3: Torna as colunas obrigatórias e adiciona a constraint de unicidade
    with op.batch_alter_table('usuario', schema=None) as batch_op:
        batch_op.alter_column('nome', existing_type=sa.String(length=150), nullable=False)
        batch_op.alter_column('email', existing_type=sa.String(length=150), nullable=False)
        batch_op.create_unique_constraint("uq_usuario_email", ['email'])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('usuario', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('email')
        batch_op.drop_column('nome')

    # ### end Alembic commands ###
